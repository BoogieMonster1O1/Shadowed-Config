buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

plugins {
    id 'maven-publish'
    id 'fabric-loom' version "1.0-SNAPSHOT"
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

allprojects {
    apply plugin: 'scala'
    apply plugin: 'java'
    apply plugin: 'fabric-loom'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    version = project.mod_version
    group = project.maven_group

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'Mojang'
            url = 'https://libraries.minecraft.net/'
        }
        maven {
            name = 'legacy-fabric'
            url = 'https://maven.legacyfabric.net'
        }
        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }
        maven {
            name = 'Babric'
            url = 'https://maven.glass-launcher.net/babric'
        }
    }

    loom {
        setIntermediaryUrl('https://maven.legacyfabric.net/net/legacyfabric/intermediary/%1$s/intermediary-%1$s-v2.jar');
    }

    def lwjgl2 = !project.minecraft_version.startsWith("1.13")
    def currentOs = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.legacyfabric:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation ("net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${fabric_version}") {
            exclude module: "legacy-fabric-entity-events-v1"
        }
        modImplementation("com.mojang:datafixerupper:4.0.26") {
            exclude group: 'com.google.code.findbugs'
            exclude group: 'com.google.code.gson'
            exclude group: 'com.google.guava'
            exclude group: 'org.apache.commons'
        }
        modApi("net.fabricmc:fabric-language-scala:0.3.2.+") {
            exclude group: 'net.fabricmc'
        }
        implementation "blue.endless:jankson:1.1.0"

        if (lwjgl2) {
            if (currentOs.contains("mac")) {
                implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
                implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
                implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
            } else if (currentOs.contains("linux")) {
                implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-babric.1'
                implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-babric.1'
                implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-babric.1'
            }
        }
    }

    if (lwjgl2) {
    if (currentOs.contains("mac")) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
                    substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
                }
                force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
            }
        }
    } else if (currentOs.contains("linux")) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    substitute(module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')) using module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-babric.1')
                    substitute module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209') using module('org.lwjgl.lwjgl:lwjgl:2.9.4-babric.1')
                }
                force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-babric.1'
            }
        }
    }
}
}

archivesBaseName = project.archives_base_name

configurations {
    shade
}

dependencies {
    shade("com.mojang:datafixerupper:4.0.26") {
        exclude group: 'com.google.code.findbugs'
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
        exclude group: 'org.apache.commons'
        exclude group: 'org.apache.logging.log4j'
    }
    shade "blue.endless:jankson:1.1.0"
    shade 'it.unimi.dsi:fastutil:7.1.0'
    subprojects.each {
        shade(project(":${it.path}")) {
            exclude group: 'net.fabricmc.fabric-api'
            exclude group: 'net.fabricmc'
            exclude group: 'com.google.code.findbugs'
            exclude group: 'com.google.guava'
            exclude group: 'org.apache.commons'
            exclude group: 'org.apache.logging.log4j'
            exclude group: 'net.minecrell'
        }
    }
}

jar {
    configurations.shade.each {
        from (project.zipTree(it)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Library that includes DFU and Jankson')
                root.appendNode('name', 'Shadowed-Config')
                root.appendNode('url', 'https://github.com/Legacy-Fabric-Community/shadowed-config')
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
